name: Build and Test
# Builds preCICE inside various docker containers and runs the tests.
# Ubuntu-based cases additionally build the Debian package and test it using lintian.
#
# See https://github.com/precice/ci-images
on:
  push:
    branches:
      - main
      - develop
  pull_request:
    paths:
      - 'cmake/**'
      - 'examples/**'
      - 'src/**'
      - 'tests/**'
      - 'thirdparty/**'
      - 'tests/**'
      - 'tools/profiling/**'
      - 'CMakeLists.txt'
      - 'extras/bindings/**'
      - '.github/workflows/build-and-test.yml'
  workflow_dispatch:

concurrency:
  group: ${ {github.event_name }}-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{github.event_name == 'pull_request'}}

jobs:
  build:
    name: ${{ format('{0} {1} {2} {3}', matrix.IMAGE, matrix.CXX, matrix.CONFIG, matrix.TYPE) }}
    runs-on: ubuntu-latest
    container:
      image: 'precice/ci-${{ matrix.IMAGE }}:latest'
      options: --shm-size=2gb
    defaults:
      run:
        shell: "bash --login -eo pipefail {0}"
    strategy:
      fail-fast: false
      matrix:
        include:
          - IMAGE: 'ubuntu-2204'
            CONFIG: Bare
            CXX: 'g++'
            TYPE: Debug
            COVFLAGS: '--coverage'
          - IMAGE: 'ubuntu-2204'
            CONFIG: MPI
            CXX: 'g++'
            TYPE: Debug
            COVFLAGS: '--coverage'
          - IMAGE: 'ubuntu-2204'
            CONFIG: MPIPETSc
            CXX: 'g++'
            TYPE: Debug
            COVFLAGS: '--coverage'
          - IMAGE: 'ubuntu-2204'
            CONFIG: Bare
            CXX: 'g++'
            TYPE: Release
          - IMAGE: 'ubuntu-2204'
            CONFIG: MPI
            CXX: 'g++'
            TYPE: Release
          - IMAGE: 'ubuntu-2204'
            CONFIG: MPIPETSc
            CXX: 'g++'
            TYPE: Release
          - IMAGE: 'ubuntu-2404'
            CONFIG: MPIPETSc
            CXX: 'g++'
            TYPE: Debug
          - IMAGE: 'archlinux'
            CONFIG: MPIPETSc
            CXX: 'g++'
            TYPE: Debug
          - IMAGE: 'archlinux'
            CONFIG: MPIPETSc
            CXX: 'g++'
            TYPE: Release
          - IMAGE: 'archlinux'
            CONFIG: MPIPETSc
            CXX: 'clang++'
            TYPE: Debug
          - IMAGE: 'archlinux'
            CONFIG: MPIPETSc
            CXX: 'clang++'
            TYPE: Release
          - IMAGE: 'fedora'
            CONFIG: MPIPETScGinkgo
            CXX: 'g++'
            TYPE: Debug
          - IMAGE: 'fedora'
            CONFIG: MPIPETScGinkgo
            CXX: 'g++'
            TYPE: Release
          - IMAGE: 'intel'
            CONFIG: MPIPETSc
            CXX: 'icpx'
            TYPE: Debug
          - IMAGE: 'intel'
            CONFIG: MPIPETSc
            CXX: 'icpx'
            TYPE: Release
    steps:
      - uses: actions/checkout@v4
      - name: Generate build directory
        run: mkdir -p build
      - name: Install polars in venv
        run: |
          python3 -m venv --system-site-packages venv
          venv/bin/pip install polars
          venv/bin/pip list
      - name: Configure
        working-directory: build
        env:
          CXX: ${{ matrix.CXX }}
          CXXFLAGS: "-Wall -Wextra -Wno-unused-parameter ${{ matrix.COVFLAGS }}"
          MPI: ${{ contains(matrix.CONFIG, 'MPI') }}
          PETSc: ${{ contains(matrix.CONFIG, 'PETSc') }}
          Ginkgo: ${{ contains(matrix.CONFIG, 'Ginkgo') }}
        run: |
          . ../venv/bin/activate # There is always a venv present
          cmake --version
          cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=${{ matrix.TYPE }} -DPRECICE_FEATURE_MPI_COMMUNICATION=${{ env.MPI }} -DPRECICE_FEATURE_PETSC_MAPPING=${{ env.PETSc }} -DPRECICE_FEATURE_GINKGO_MAPPING=${{ env.Ginkgo }} -DPRECICE_FEATURE_LIBBACKTRACE_STACKTRACES=ON -DCMAKE_EXE_LINKER_FLAGS="${{ matrix.COVFLAGS }}" -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: ${{ format('{0} {1} {2} {3}', matrix.IMAGE, matrix.CXX, matrix.CONFIG, matrix.TYPE) }} CMakeCache
          path: build/CMakeCache.txt
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: ${{ format('{0} {1} {2} {3}', matrix.IMAGE, matrix.CXX, matrix.CONFIG, matrix.TYPE) }} CMakeLogs
          path: 'build/CMakeFiles/*.log'
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: ${{ format('{0} {1} {2} {3}', matrix.IMAGE, matrix.CXX, matrix.CONFIG, matrix.TYPE) }} CompileCommands
          path: build/compile_commands.json
      - name: Enable compiler annotations
        uses: electronjoe/gcc-problem-matcher@v1
        if: ${{ matrix.IMAGE == 'archlinux' }}
      - name: Compile
        working-directory: build
        run: |
          make -j $(nproc)
      - name: Adjust user rights
        run: chown -R $PRECICE_USER build
      - name: Tests
        env:
          CTEST_OUTPUT_ON_FAILURE: 1
          BOOST_TEST_LOG_LEVEL: all
          OMPI_MCA_btl_tcp_if_include: lo # required for arch
          PSM3_HAL: loopback # required for fedora
        working-directory: build
        run: su -c ". ../venv/bin/activate && ctest" $PRECICE_USER
      - name: Coverage Report
        working-directory: build
        if: ${{ matrix.COVFLAGS }}
        run: |
          . ../venv/bin/activate
          pip install fastcov
          fastcov --lcov -e '/usr/' -e '/opt/'
      - uses: codecov/codecov-action@v4
        with:
          files: ./build/coverage.info
          token: ${{ secrets.CODECOV_TOKEN }}
        if: ${{ matrix.COVFLAGS }}
      - name: Check packages
        working-directory: build
        if: ${{ contains(matrix.IMAGE, 'ubuntu') }}
        run: |
          cpack
          lintian -i --suppress-tags control-file-has-bad-permissions *.deb
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: ${{ format('{0} {1} {2} {3}', matrix.IMAGE, matrix.CXX, matrix.CONFIG, matrix.TYPE) }} TestOutput
          path: build/TestOutput/
