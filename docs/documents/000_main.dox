/**

@mainpage notitle

## For Adapter Developers

Please refer to the documentation on https://precice.org/docs and to the documentation of the \ref precice::Participant Participant.
Refer to \ref precice::tooling for the tooling API.

The API of further native bindings can be found here:

- \ref preciceC.h "preciceC" for the C bindings.
- \ref preciceFortran.hpp "preciceFortran" for the Fortran bindings.

The detailed porting guides on https://precice.org/couple-your-code-porting-overview help you to port adapters between major versions of preCICE.

## For Library Developers

For general information, have a look at the developer documentation on the website https://precice.org/dev-docs-overview.

The directory \ref src contains the sources of preCICE.
Every component has its own directory and namespace. The namespaces of internal components are all rooted in the project namespace \ref precice.
The library API of preCICE is contained in the directory and namespace \ref precice, which brings together the functionalities of all components.

The following components currently exist:

- \ref precice::acceleration "acceleration" provides various acceleration schemes.
- \ref precice::action "action" contains actions that can be executed to modify the exchanged data, can be written in Python.
- \ref precice::com "com" defines a data communication abstraction layer and implementations.
- \ref precice::cplscheme "cplscheme" takes coupling data and communication objects and implements coupling schemes for coupled simulations.
- \ref src/drivers "drivers" holds the main function for building the ```precice-tools``` executable.
- \ref precice::io "io" implements import and export of the coupling mesh and data.
- \ref precice::logging "logging" contains the code for the logging framework, based on boost logging.
- \ref precice::m2n "m2n" defines the logical part of the parallel communication between participants.
- \ref precice::mesh "mesh" holds the coupling mesh and coupling data classes, which form the base of all other components.
- \ref precice::math "math" provides general mathematical constants and functions.
- \ref precice::mapping "mapping" defines data mapping from points to meshes by using geometrical queries.
- \ref precice::partition "partition" computes the partitioning of distributed meshes at initialization.
- \ref precice::profiling "profiling" provides utilities for performance profiling .
- \ref precice::query "query" holds classes to perform geometrical queries on geometries.
- \ref precice::testing "testing" holds the code that configure the boost testing framework and the main function for the testprecice executable.
- \ref precice::time "time" contains the functionality regarding interpolation in time
- \ref precice::utils "utils" contains functionality serving as technical basis for all other components.
- \ref precice::xml "xml" contains the XML configuration parser.


The components of preCICE have some common subdirectory/namespace structure. Some typical directories appearing are ```tests```, ```config```, and ```impl```.
- ```tests``` holds classes for automated testing of the corresponding component.
- ```config``` provides functionality to configure the classes of a component from xml files.
- ```impl``` contains implementation of a component which is not part of its interface and used only internally.

*/
